datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// generator zod {
//   provider         = "zod-prisma-types"
//   output           = "./generated/zod" // default is ./generated/zod
//   prismaClientPath = "../client" // relative path from the output directory just above
//   // useMultipleFiles                 = true // default is false
//   // writeBarrelFiles                 = false // default is true
//   // createInputTypes                 = false // default is true
//   // createModelTypes                 = false // default is true
//   // addInputTypeValidation           = false // default is true
//   // addIncludeType                   = false // default is true
//   // addSelectType                    = false // default is true
//   // validateWhereUniqueInput         = false // default is true
//   // createOptionalDefaultValuesTypes = true // default is false
//   // createRelationValuesTypes        = true // default is false
//   // createPartialTypes               = true // default is false
//   // useDefaultValidators             = false // default is true
//   // coerceDate                       = false // default is true
//   // writeNullishInModelTypes         = true // default is false
// }

generator rules {
  provider         = "prisma-security-rules"
  output           = "./generated/security-rules"
  prismaClientPath = "./client"
  contextTypePath  = "./context"
  rulesfolderPath  = "./rules"
}

model Users {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  name      String?
  posts     Post[]
  reactions Reaction[]
  mentions  Mention[]
}

model Post {
  id        Int        @id @default(autoincrement())
  title     String
  content   String
  published Boolean    @default(false)
  author    Users      @relation(fields: [authorId], references: [id])
  authorId  Int
  reactions Reaction[]
  mentions  Mention[]

  parentPostId Int?
  parentPost   Post?  @relation("PostToPost", fields: [parentPostId], references: [id])
  childPosts   Post[] @relation("PostToPost")
}

model Reaction {
  id     Int    @id @default(autoincrement())
  emoji  String
  post   Post   @relation(fields: [postId], references: [id])
  postId Int
  user   Users  @relation(fields: [userId], references: [id])
  userId Int
}

model Mention {
  id     Int    @id @default(autoincrement())
  name   String
  postId Int
  post   Post   @relation(fields: [postId], references: [id])

  userId Int
  user   Users @relation(fields: [userId], references: [id])
}
